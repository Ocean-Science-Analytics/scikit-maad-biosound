[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "scikit-maad-biosound"
version = "0.1.0"
description = "Marine acoustic analysis tool using scikit-maad for processing audio files and computing acoustic indices"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
keywords = ["acoustics", "marine", "audio", "scikit-maad", "bioacoustics"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Multimedia :: Sound/Audio :: Analysis",
]
requires-python = ">=3.8"
dependencies = [
    "scikit-maad>=1.3.0",
    "numpy>=1.20.0",
    "pandas>=1.3.0",
    "matplotlib>=3.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]

[project.scripts]
scikit-maad-gui = "scikit_maad_biosound.main:main"
maad-generate-samples = "scikit_maad_biosound.utils.sample_generator:main"
maad-performance-test = "scikit_maad_biosound.performance_test:main"

[project.urls]
Homepage = "https://github.com/yourusername/scikit-maad-biosound"
Repository = "https://github.com/yourusername/scikit-maad-biosound"
Issues = "https://github.com/yourusername/scikit-maad-biosound/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "-ra",
]
markers = [
    "integration: marks tests as integration tests",
    "gui: marks tests that require GUI components",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | archive
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "maad.*",
    "tkinter.*",
]
ignore_missing_imports = true

[tool.ruff]
# Set the target Python version
target-version = "py38"

# Same line length as Black
line-length = 88

# Exclude directories
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "archive",
    "test_outputs",
    "test_wav_files",
    "performance_output",
    "*.egg-info",
]

[tool.ruff.lint]
# Enable pycodestyle (`E`), Pyflakes (`F`), and more
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "RUF",  # Ruff-specific rules
]

# Ignore specific rules
ignore = [
    "E501",  # Line too long (handled by formatter)
    "E741",  # Ambiguous variable name
    "B008",  # Do not perform function calls in argument defaults
    "B905",  # `zip()` without an explicit `strict=` parameter
    "C901",  # Function is too complex
    "RUF001", # String contains ambiguous unicode character
    "RUF002", # Docstring contains ambiguous unicode character
    "RUF003", # Comment contains ambiguous unicode character
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
# Combine imports from the same module
combine-as-imports = true

# Known first-party modules
known-first-party = ["scikit_maad_biosound", "gui", "processing", "utils"]

[tool.ruff.lint.per-file-ignores]
# Ignore import violations in __init__ files
"__init__.py" = ["F401", "F403"]

# Ignore some rules in tests
"tests/*.py" = ["F841", "B008"]
"test_*.py" = ["F841", "B008"]

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Indent with 4 spaces
indent-style = "space"

# Respect magic trailing commas
skip-magic-trailing-comma = false

# Unix-style line endings
line-ending = "auto"